rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User inventories - users can only access their own
    match /user_inventories/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Recipes - read for all authenticated users, write with validation
    match /recipes/{recipeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && validateRecipeData();
      allow update: if request.auth != null 
        && (resource.data.author == request.auth.uid || hasModeratorRole())
        && validateRecipeData();
    }
    
    // Ingredients - read for all authenticated users, write for moderators
    match /ingredients/{ingredientId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasModeratorRole();
    }
    
    // Reviews - users can create/edit their own reviews
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && validateReviewData();
      allow update, delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }
    
    // Helper functions
    function validateRecipeData() {
      return request.resource.data.keys().hasAll(['name', 'ingredients', 'instructions']) &&
             request.resource.data.name is string &&
             request.resource.data.ingredients is list &&
             request.resource.data.instructions is string;
    }
    
    function validateReviewData() {
      return request.resource.data.keys().hasAll(['rating', 'userId', 'recipeId']) &&
             request.resource.data.rating is number &&
             request.resource.data.rating >= 1 &&
             request.resource.data.rating <= 5 &&
             request.resource.data.userId == request.auth.uid;
    }
    
    function hasModeratorRole() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'moderator';
    }
  }
}
